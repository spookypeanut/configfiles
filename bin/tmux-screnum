#!/usr/bin/env python

import subprocess
import sys
import re

def checked_call(cmd, expected_status=0):
    """
    Execute the given command in a subprocess shell, and abort if the error
    code isn't what you expected.

    I would use check_output here, but I wanted to make the script compatible
    with Python 2.6.
    """
    proc_obj = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT)
    output = proc_obj.communicate()[0]

    if proc_obj.returncode != expected_status:
        sys.exit("Command '%s' failed: %s" % (cmd, output))

    return output

def get_windows():
    window_list = checked_call("tmux list-windows")
    window_extractor_regex = re.compile('^(\d+): (.*?) \[\d+x\d+\]')

    windows = {}

    for line in window_list.split('\n'):
        line = line.strip()

        match = window_extractor_regex.search(line)

        if match is not None:
            windows[int(match.group(1))] = match.group(2)

    return windows

def screnum():
    print "Reading window list ..."
    # Remember original window number
    my_window_number = int(checked_call('tmux display-message -p "#I"'))
    windows = get_windows()
    sorted_wins = sorted(windows.keys())
    for newnum, oldnum in enumerate(sorted_wins):
        if oldnum == newnum:
            continue
        if newnum in windows:
            movement_cmd = "swap-window"
            if my_window_number == oldnum:
                my_window_number = newnum
            tmp = windows[oldnum]
            windows[oldnum] = windows[newnum]
            windows[newnum] = tmp

            print "Swapping windows %d and %d" % (oldnum, newnum)
        else:
            movement_cmd = "move-window"
            if my_window_number == oldnum:
                my_window_number = newnum
            windows[newnum] = windows[oldnum]
            del windows[oldnum]

            print "Moving window %d to %d" % (oldnum, newnum)

        checked_call("tmux %s -d -s %d -t %d" % (movement_cmd, oldnum, newnum))
    checked_call("tmux select-window -t :%d" % (my_window_number))

if __name__ == "__main__":
    screnum()
